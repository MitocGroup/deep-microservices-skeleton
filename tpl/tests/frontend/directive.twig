// THIS TEST WAS GENERATED AUTOMATICALLY ON {{ "now"|date("m/d/Y H:i:s") }}

'use strict';

import moduleName from '{{ moduleNamePath }}';

  // @todo: Add more advanced tests
  describe('Directives', () => {

  let directiveElement;
  let compile;
  let scope, rootScope;
{% if directiveController %}
  let $controller;
  let controller;
{% endif %}
{% if services|length > 0 %}

  //mocked service references
{% for service in services %}
  let mock{{ service }};
{% endfor %}
{% endif %}
{% if providers|length > 0 %}

  //mocked provider references
{% for provider in providers %}
  let mock{{ provider }};
{% endfor %}
{% endif %}

  beforeEach(() => {

    // Load modules
    module('ui.router');
{% if templateUrl %}
    module('templates');
{% endif %}
    angular.mock.module(moduleName);
{% if services|length > 0 or providers|length > 0%}

    // include previous module containing mocked service/provider which will override actual service/provider
    module(($provide) => {
  {% for service in services %}

      // @todo - need to implement methods for mock {{ service }}
      $provide.service('{{ service }}', () => {
        return {
          sampleMethod: function() { return; },
        };
      });
  {% endfor %}
  {% for provider in providers %}

      // @todo - need to implement methods for mock {{ provider }}
      $provide.provider('{{ provider }}', function() {
        this.$get = () => {
          var sampleMethod = jasmine.createSpy('sampleMethod');

          return {
            sampleMethod: sampleMethod,
          };
        };
      });
  {% endfor %}
  });
{% endif %}
{% if providers|length > 0 %}

    //mocked provider references
    module(({{ providers|join('Provider, ') }}Provider) => {
{% for provider in providers %}
      mock{{ provider }} = {{ provider }}Provider;
{% endfor %}
    });
{% endif %}
{% if services|length > 0 %}

    //mocked service references
    inject(({{ services|join(', ') }}) => {
{% for service in services %}
      mock{{ service }} = {{ service }};
{% endfor %}
    });
{% endif %}

    // store references to scope, rootScope and compile
    // so they are available to all tests in this describe block
    //
    // $compile service that is responsible for compiling any HTML template
    // $templateCache  service that is responsible for caching template for quick retrieval
    // $controller service that is responsible for instantiating controllers
    // $rootScope ngMock’s service to allow getting an instance of angular’s core and create child scopes via its $new
    //
    // The underscores are a convenience trick to inject a service under a different name
    // so that we can locally assign a local variable of the same name as the service.
    inject((_$controller_, $templateCache, $compile, $rootScope) => {
{% if templateUrl %}

      // workaround for deepAsset.locate:
      // assign the template to the expected url called by the directive and put it in the cache
      let template = $templateCache.get('frontend/{{ templateUrl }}');
      $templateCache.put('{{ templateUrl }}', template);
{% endif %}

{% if directiveController %}
      $controller = _$controller_;
{% endif %}
      compile = $compile;
      rootScope = $rootScope;
      scope = $rootScope.$new();

      //how to set model testedModelValue value for directive
      //scope.testedModelValue = null;
    });
  });

  /**
  * Return compiled directive ready for testing
  * @returns {HTMLDivElement}
  */
  function getCompiledElement() {
    scope.$digest();
{% if directiveController %}

    controller = $controller('{{ directiveController }}', {
    $scope: scope,
    $rootScope: rootScope,
{% for service in services %}
      {{ service }}: mock{{ service }},
{% endfor %}
{% for provider in providers %}
      {{ provider }}: mock{{ provider }},
{% endfor %}
    });

    scope.$digest();
{% endif %}

{% if restrictType == "A" %}
    let element = angular.element('<div {{ directive }}></div>');
{% elseif restrictType == "C" %}
    let element = angular.element('<div class="{{ directive }}"></div>');
{% elseif restrictType == "E" %}
    let element = angular.element('<{{ directive }}>');
{% elseif restrictType == "M" %}
    let element = angular.element('<!--directive:{{ directive }} -->');
{% else %}
    throw new Error('Invalid value [ {{ restrictType }} ] in restrict');
{% endif %}
    let compiledElement = compile(element)(scope);
    scope.$digest();
    return compiledElement;
  }

  //@todo - should be added directive's use cases by using "directiveElement"
  describe('{{ directiveName }}', () => {
    it('{{ directive }} has html', () => {
      let error = null;

      try {
        directiveElement = getCompiledElement();
      } catch (exception) {
        error = exception;
      }

      if (!error) {
        expect(typeof directiveElement).toEqual('object');
        expect(directiveElement.html()).not.toEqual(undefined);
      }
    });
  });
});
